grammar de.upb.sede.dsl.Seco with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate seco "http://www.upb.de/sede/dsl/Seco"


Entries:
    (elements+=Entry)*;
  
Entry:
    (
    	instruction = Instruction |
    	assignment  = Assignment |
    	definition  = EntityDefinition
    );
    
/*
 * E.g.:
 *  a = fruits.Apple::__construct({i1=0,i2=0,i3=10,i4=10})
 */
 
Instruction:
	(returnValues+=FieldName (',' returnValues+=FieldName)* "=")? 
			(contextField = FieldName | contextEntity = EntityName) 
						("::"|".") method=MethodName "(" "{"? 
								(
									(args+=Argument)		// First argument
									(',' args+=Argument)*  // Additional Arguments
								)? "}" ? ")" ";"
;
								


Argument:
	(((indexed ?= "i" index = INT)| parameterName = FieldName) '=')? value = FieldValue
;


Assignment:
	field=FieldName "=" value=FieldValue ("as" )?
;


/*
 * E.g.:
 * define a.b.C wraps d.e.F extends g.H, i.J { 
 * 		static operation m1: (Number, String, some.Entity) -> (Bool, some.other.Entity) {
 * 			"runtime-data" = {
 * 				"some_data_java_needs" = 10
 * 			}
 * 		}
 * }
 */
EntityDefinition:
	(def ?= "define") qualifiedName = EntityName 
	(
		(wrapper ?= "wraps" 
			wrappedEntity = EntityName
		)? &
		(extension ?= "extends" 
			baseEntities += EntityName 
			(',' baseEntities += EntityName)*
		)?
	)
	( entityConfig=EntityConfig )?
;

EntityConfig:
	{EntityConfig} "{"(methods += EntityOperation)* "}"
;

EntityOperation:
	 (static ?= "static"? & pure ?= "pure") ? "operation" operationName = MethodName
	  "(" 
	 		(parameters += EntityOperationParam ("," parameters += EntityOperationParam)*)?
	 ")" 
	 ('->' '(' 
	 		(outputs += EntityOperationParam ("," outputs += EntityOperationParam)*)? 
	 ')')?
	 ('{'
	 		(runtimeDataAdded ?= "\"runtime-data\"" '=' runtimeData = Json)? 
	 '}')?
;


EntityOperationParam:
	  (
	  	number ?= "Number" | 
	  	string ?= "String" | 
	  	bool ?= "Bool" |  
	  	(
	  		(
	  			(final ?= "final")? &
	  			(output ?= "out")?
	  		)  
	  		parameterType = EntityName
	  	)
	  ) 
	  (
	  	parameterName = VersionlessFieldName
	  )?
	  (
	  	valueFixed ?= "=" fixedValue =FieldValue
	  )
;

	 
Dictionary:
	'{' 
		((members+=DictionaryMember)
		(',' members+=DictionaryMember)*)? 
	'}';

DictionaryMember:
	key=STRING ':' value=DictionaryValue;
	
DictionaryValue:
	Dictionary | StringConst | Array | 'true' | 'false' | 'null' | NumberConst;

Array:
	'[' ((values+=DictionaryValue) (',' values+=DictionaryValue)*)? ']';
  


Json returns ecore::EString:
	'{' 
		((JsonObjectMemeber)
		(',' JsonObjectMemeber)*)? 
	'}';

JsonObjectMemeber returns ecore::EString:
	STRING ':' JsonObjectValue;
	
	
JsonObjectValue returns ecore::EString:
	Json | StringConst | JsonArray |  'true' | 'false' | 'null' | NumberConst;

JsonArray returns ecore::EString:
	'[' ((JsonObjectValue) (',' JsonObjectValue)*)? ']';



QualifiedName  returns ecore::EString:
	ID ('.' ID)*
;
	
EntityName:
     name = QualifiedName '$'?;
     
MethodName returns ecore::EString:
	ID '!'?;
    
StringConst returns ecore::EString:
	 STRING;
	
BoolConst returns ecore::EString:
	 "True" | "true" | "False" | "false" | "TRUE" | "FALSE";
	
NullConst returns ecore::EString:
	 "Null" | "null" | "NULL" | "NuLL";
	
NumberConst returns ecore::EString:
	 ("-" | "+")? INT ("." INT)? (("e"|"E") ("-" | "+") INT)?;
	 
	 
VersionlessFieldName returns FieldName:
	(name = ID) | (this?='this') | (base?='base' ( => '(' baseIndex=INT ')')?) | (wrapper?= 'wrapper');

FieldName:
	(name = ID (':' version = INT)?);
	
FieldValue:
	(
		number ?= NumberConst |
		string ?= StringConst | 
		bool ?= BoolConst | 
		null ?= NullConst | 
		(entityReference ?= "ref"  entity = EntityName ('::' method=MethodName)?) |
		(=>field = FieldName) 
	)
;

	 
	 