grammar de.upb.sede.dsl.Seco with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes


//generate seco "http://www.upb.de/sede/dsl/Seco"

import "platform:/resource/de.upb.sede.dsl/model/current/Seco.ecore"


Entries:
	(
    	entities+=EntityClassDefinition
    )* 
    (
    	instructions+=Assignment |
    	instructions+=Yield
    )*
    (
    	deployments += EntityDeploymentDefinition	
    )* ;
    
/*
 * E.g.:
 *  a = fruits.Apple::__construct({i1=0,i2=0,i3=10,i4=10})
 */
 

Operation:
	(=> contextField = Field | entityName = EntityName) ("::")
		 method=MethodName "(" "{"? 
				(
					(args+=Argument)		// First argument
					(',' args+=Argument)*  // Additional Arguments
				)? "}"? ")"
;
								


Argument:
	(((-> indexed ?= "i" index = INT)| parameterName = ID) '=')? value = FieldValue
;


Assignment:
	(=> assignedFields += Field (multiAssignment ?= ',' assignedFields+= Field)* "=")? value = FieldValue ";"
;


/*
 * E.g.:
 * class : a.b.C  wraps d.e.F extends g.H, i.J {
 * 		static method:  Construct (Number, String, some.Entity) -> (Bool, some.other.Entity) {
 * 			
 * 			runtime : {
 * 				"some_data_java_needs" = 10
 * 			}
 * 		};
 * 		cast: <-> $some.Other.Entity;
 * }
 */
EntityClassDefinition:
	("class" ":") qualifiedName = EntityName  
	(
		(wrapper ?= "wraps" 
			wrappedEntity = EntityName
		)? &
		(extension ?= "extends" 
			baseEntities += EntityName 
			(',' baseEntities += EntityName)*
		)?
	)
	"{"
		(
			methods += EntityMethod |
			casts += EntityCast
		)* 
		(runtimeInfo = Json)?
	"}"
;


EntityMethod:
	(property = EntityMethodProp)? "method" ":" methodName = MethodName
	 paramSignature = EntityMethodParamSignature 
	 (
	 	methodInstructions += EntityMethodInstructions
	 )*
	 ("runtime" ":" runtimeInfo = Json)? ';'
;

enum EntityMethodProp:
	MUTATING = 'mutating' | STATIC = 'static' | PURE = 'pure'
;

EntityMethodInstructions:
	{EntityMethodInstructions} "do" (order=InstructionOrder)? ":" "{"
	    (instructions+=Assignment |
		instructions+=Yield)*
    "}"
;


InstructionOrder returns ecore::EInt:
	"before" | "instead" | "after" | (("-" | "+")?INT)
;

EntityMethodParamSignature:
	{EntityMethodParamSignature} 
	("(" 
	 	(parameters += EntityMethodParam ("," parameters += EntityMethodParam)*)?
	 ")")
	 ('->' '(' 
	 	(outputs += EntityMethodParam ("," outputs += EntityMethodParam)*)? 
	 ')')?
;


EntityMethodParam:
	(
		(final ?= "final")?
	)  
	parameterType = EntityName
	  (
	  	parameterName = ID
	  )?
	  (
	  	valueFixed ?= "=" fixedValue = FieldValue
	  )?
;


EntityCast:
	("casts" "to" | "cast") ":" resultingEntity = EntityName (additionalData = Json)? ';' 
;

EntityDeploymentDefinition:
	"deployment" ":" qualifiedName = EntityName "{"
		(
			procedures += DeploymentProcedure |
			dependencies += DeploymentDependency
		)* 
	"}"
;

DeploymentProcedure: 
	=> "procedure" ":" 
		((
			=>("name=" name=ID) &
			("act=" act=ID) &
			("fetch=" fetch=ID) &
			("source=" source=STRING)
		) 
		| 
		(
			(name=ID)
			(act=ID)
			(fetch=ID)
			(source=STRING)
		))
		";"
;

DeploymentDependency:
	"dependency" ":" deployment=EntityName ("(" order = DependencyOrder")")? ";"
;

DependencyOrder returns ecore::EInt:
	"PRE-FETCH" | "PRE-RUN" | "POST-RUN" | (("-" | "+")?INT)
;

//enum TransformDirection:
//	BI = '<->' | BI = 'to and from' | 
//	TO = '->' | TO = 'to' |
//	FROM = '<-' | FROM = 'from' |
//	BI = 'bijective' | 
//	TO = 'surjective' |
//	FROM = 'injective'
//;

Yield:
	=> "yield" yields += FieldValue (multiYield ?= ',' yields += FieldValue)* ';'?
;


QualifiedName  returns ecore::EString:
	-> ID ('.' ID)*
;
	
EntityName returns ecore::EString:
     '$'? QualifiedName ;
     
MethodName returns ecore::EString:
	 '!'? ID ;
    
StringConst returns ecore::EString:
	 STRING;
	
BoolConst returns ecore::EString:
	 "True" | "true" | "False" | "false" | "TRUE" | "FALSE";
	
NullConst returns ecore::EString:
	 "Null" | "null" | "NULL" | "NuLL";
	
NumberConst returns ecore::EString:
	 ("-" | "+")? INT ("." INT)? (("e"|"E") ("-" | "+") INT)?;
	 
	 
Field:
	name = ID (-> dereference ?= '->' member = __TerminalField)?;
	
__TerminalField returns Field:
	Field
;
	
FieldValue:
	( -> cast ?='(' castTarget = EntityName ')'  castValue = __TerminalFieldValue) |
	number = NumberConst |
	string = StringConst | 
	bool = BoolConst | 
	null ?= NullConst | 
//	(entityReference ?= "ref"  entity = EntityName ('::' method=MethodName)?) | // TODO: do we need entity references?
	(=> operation = Operation) | 
	(field = Field)
;	

__TerminalFieldValue returns FieldValue:
	FieldValue
;


Json returns ecore::EString:
	'{' 
		((JsonObjectMemeber)
		(',' JsonObjectMemeber)*)? 
	'}';

JsonObjectMemeber returns ecore::EString:
	STRING ':' JsonObjectValue;
	
	
JsonObjectValue returns ecore::EString:
	Json | StringConst | JsonArray |  'true' | 'false' | 'null' | NumberConst;

JsonArray returns ecore::EString:
	'[' ((JsonObjectValue) (',' JsonObjectValue)*)? ']';

