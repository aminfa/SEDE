/*
 * generated by Xtext 2.15.0
 */
package de.upb.sede.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SecoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EntriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.Entries");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsEntryParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Entries:
		//	elements+=Entry*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Entry*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Entry
		public RuleCall getElementsEntryParserRuleCall_0() { return cElementsEntryParserRuleCall_0; }
	}
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.Entry");
		private final Assignment cInstructionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_0 = (RuleCall)cInstructionAssignment.eContents().get(0);
		
		//Entry:
		//	instruction=Instruction;
		@Override public ParserRule getRule() { return rule; }
		
		//instruction=Instruction
		public Assignment getInstructionAssignment() { return cInstructionAssignment; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_0() { return cInstructionInstructionParserRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFieldFieldNameParserRuleCall_0_0_0 = (RuleCall)cFieldAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cContextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContextQualifiedNameParserRuleCall_1_0 = (RuleCall)cContextAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodMethodNameParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInputsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInputsParametersParserRuleCall_6_0 = (RuleCall)cInputsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///*
		// * E.g.:
		// *  s1=Catalano.Imaging.Filters.Crop::__construct({i1=0,i2=0,i3=10,i4=10})
		// */ Instruction:
		//	(field=FieldName "=")? context=QualifiedName ("::" | ".") method=MethodName "(" "{"? inputs=Parameters? "}"? ");";
		@Override public ParserRule getRule() { return rule; }
		
		//(field=FieldName "=")? context=QualifiedName ("::" | ".") method=MethodName "(" "{"? inputs=Parameters? "}"? ");"
		public Group getGroup() { return cGroup; }
		
		//(field=FieldName "=")?
		public Group getGroup_0() { return cGroup_0; }
		
		//field=FieldName
		public Assignment getFieldAssignment_0_0() { return cFieldAssignment_0_0; }
		
		//FieldName
		public RuleCall getFieldFieldNameParserRuleCall_0_0_0() { return cFieldFieldNameParserRuleCall_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//context=QualifiedName
		public Assignment getContextAssignment_1() { return cContextAssignment_1; }
		
		//QualifiedName
		public RuleCall getContextQualifiedNameParserRuleCall_1_0() { return cContextQualifiedNameParserRuleCall_1_0; }
		
		//"::" | "."
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"::"
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }
		
		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//method=MethodName
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }
		
		//MethodName
		public RuleCall getMethodMethodNameParserRuleCall_3_0() { return cMethodMethodNameParserRuleCall_3_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//"{"?
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//inputs=Parameters?
		public Assignment getInputsAssignment_6() { return cInputsAssignment_6; }
		
		//Parameters
		public RuleCall getInputsParametersParserRuleCall_6_0() { return cInputsParametersParserRuleCall_6_0; }
		
		//"}"?
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//");"
		public Keyword getRightParenthesisSemicolonKeyword_8() { return cRightParenthesisSemicolonKeyword_8; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInputsParameterParserRuleCall_0_0 = (RuleCall)cInputsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInputsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInputsParameterParserRuleCall_1_1_0 = (RuleCall)cInputsAssignment_1_1.eContents().get(0);
		
		//Parameters:
		//	inputs+=Parameter (',' inputs+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//inputs+=Parameter (',' inputs+=Parameter)*
		public Group getGroup() { return cGroup; }
		
		//inputs+=Parameter
		public Assignment getInputsAssignment_0() { return cInputsAssignment_0; }
		
		//Parameter
		public RuleCall getInputsParameterParserRuleCall_0_0() { return cInputsParameterParserRuleCall_0_0; }
		
		//(',' inputs+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//inputs+=Parameter
		public Assignment getInputsAssignment_1_1() { return cInputsAssignment_1_1; }
		
		//Parameter
		public RuleCall getInputsParameterParserRuleCall_1_1_0() { return cInputsParameterParserRuleCall_1_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIsIndexedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cIsIndexedIKeyword_0_0_0 = (Keyword)cIsIndexedAssignment_0_0.eContents().get(0);
		private final Assignment cIndexAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_0_1_0 = (RuleCall)cIndexAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsNumbAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIsNumbNumberConstParserRuleCall_1_0_0 = (RuleCall)cIsNumbAssignment_1_0.eContents().get(0);
		private final Assignment cIsStringAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIsStringStringConstParserRuleCall_1_1_0 = (RuleCall)cIsStringAssignment_1_1.eContents().get(0);
		private final Assignment cIsBoolAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cIsBoolBoolConstParserRuleCall_1_2_0 = (RuleCall)cIsBoolAssignment_1_2.eContents().get(0);
		private final Assignment cIsNullAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cIsNullNullConstParserRuleCall_1_3_0 = (RuleCall)cIsNullAssignment_1_3.eContents().get(0);
		private final Assignment cIsFieldAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cIsFieldFieldNameParserRuleCall_1_4_0 = (RuleCall)cIsFieldAssignment_1_4.eContents().get(0);
		
		//Parameter:
		//	(isIndexed?="i" index=INT)? (isNumb?=NumberConst | isString?=StringConst | isBool?=BoolConst | isNull?=NullConst |
		//	isField?=FieldName);
		@Override public ParserRule getRule() { return rule; }
		
		//(isIndexed?="i" index=INT)? (isNumb?=NumberConst | isString?=StringConst | isBool?=BoolConst | isNull?=NullConst |
		//isField?=FieldName)
		public Group getGroup() { return cGroup; }
		
		//(isIndexed?="i" index=INT)?
		public Group getGroup_0() { return cGroup_0; }
		
		//isIndexed?="i"
		public Assignment getIsIndexedAssignment_0_0() { return cIsIndexedAssignment_0_0; }
		
		//"i"
		public Keyword getIsIndexedIKeyword_0_0_0() { return cIsIndexedIKeyword_0_0_0; }
		
		//index=INT
		public Assignment getIndexAssignment_0_1() { return cIndexAssignment_0_1; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_0_1_0() { return cIndexINTTerminalRuleCall_0_1_0; }
		
		//isNumb?=NumberConst | isString?=StringConst | isBool?=BoolConst | isNull?=NullConst | isField?=FieldName
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//isNumb?=NumberConst
		public Assignment getIsNumbAssignment_1_0() { return cIsNumbAssignment_1_0; }
		
		//NumberConst
		public RuleCall getIsNumbNumberConstParserRuleCall_1_0_0() { return cIsNumbNumberConstParserRuleCall_1_0_0; }
		
		//isString?=StringConst
		public Assignment getIsStringAssignment_1_1() { return cIsStringAssignment_1_1; }
		
		//StringConst
		public RuleCall getIsStringStringConstParserRuleCall_1_1_0() { return cIsStringStringConstParserRuleCall_1_1_0; }
		
		//isBool?=BoolConst
		public Assignment getIsBoolAssignment_1_2() { return cIsBoolAssignment_1_2; }
		
		//BoolConst
		public RuleCall getIsBoolBoolConstParserRuleCall_1_2_0() { return cIsBoolBoolConstParserRuleCall_1_2_0; }
		
		//isNull?=NullConst
		public Assignment getIsNullAssignment_1_3() { return cIsNullAssignment_1_3; }
		
		//NullConst
		public RuleCall getIsNullNullConstParserRuleCall_1_3_0() { return cIsNullNullConstParserRuleCall_1_3_0; }
		
		//isField?=FieldName
		public Assignment getIsFieldAssignment_1_4() { return cIsFieldAssignment_1_4; }
		
		//FieldName
		public RuleCall getIsFieldFieldNameParserRuleCall_1_4_0() { return cIsFieldFieldNameParserRuleCall_1_4_0; }
	}
	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.FieldName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.MethodName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MethodName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class StringConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.StringConst");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringConst:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class BoolConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.BoolConst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTRUEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFALSEKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//BoolConst:
		//	"True" | "true" | "False" | "false" | "TRUE" | "FALSE";
		@Override public ParserRule getRule() { return rule; }
		
		//"True" | "true" | "False" | "false" | "TRUE" | "FALSE"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"True"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//"true"
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
		
		//"False"
		public Keyword getFalseKeyword_2() { return cFalseKeyword_2; }
		
		//"false"
		public Keyword getFalseKeyword_3() { return cFalseKeyword_3; }
		
		//"TRUE"
		public Keyword getTRUEKeyword_4() { return cTRUEKeyword_4; }
		
		//"FALSE"
		public Keyword getFALSEKeyword_5() { return cFALSEKeyword_5; }
	}
	public class NullConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.NullConst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNullKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNULLKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNuLLKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//NullConst:
		//	"Null" | "null" | "NULL" | "NuLL";
		@Override public ParserRule getRule() { return rule; }
		
		//"Null" | "null" | "NULL" | "NuLL"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Null"
		public Keyword getNullKeyword_0() { return cNullKeyword_0; }
		
		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
		
		//"NULL"
		public Keyword getNULLKeyword_2() { return cNULLKeyword_2; }
		
		//"NuLL"
		public Keyword getNuLLKeyword_3() { return cNuLLKeyword_3; }
	}
	public class NumberConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.upb.sede.dsl.Seco.NumberConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//NumberConst:
		//	("-" | "+")? INT ("." INT)? (("e" | "E") ("-" | "+") INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//("-" | "+")? INT ("." INT)? (("e" | "E") ("-" | "+") INT)?
		public Group getGroup() { return cGroup; }
		
		//("-" | "+")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//(("e" | "E") ("-" | "+") INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"e" | "E"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//"e"
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }
		
		//"E"
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }
		
		//"-" | "+"
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_3_1_0() { return cHyphenMinusKeyword_3_1_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_3_1_1() { return cPlusSignKeyword_3_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}
	
	
	private final EntriesElements pEntries;
	private final EntryElements pEntry;
	private final InstructionElements pInstruction;
	private final ParametersElements pParameters;
	private final ParameterElements pParameter;
	private final FieldNameElements pFieldName;
	private final MethodNameElements pMethodName;
	private final QualifiedNameElements pQualifiedName;
	private final StringConstElements pStringConst;
	private final BoolConstElements pBoolConst;
	private final NullConstElements pNullConst;
	private final NumberConstElements pNumberConst;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SecoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEntries = new EntriesElements();
		this.pEntry = new EntryElements();
		this.pInstruction = new InstructionElements();
		this.pParameters = new ParametersElements();
		this.pParameter = new ParameterElements();
		this.pFieldName = new FieldNameElements();
		this.pMethodName = new MethodNameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pStringConst = new StringConstElements();
		this.pBoolConst = new BoolConstElements();
		this.pNullConst = new NullConstElements();
		this.pNumberConst = new NumberConstElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.upb.sede.dsl.Seco".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Entries:
	//	elements+=Entry*;
	public EntriesElements getEntriesAccess() {
		return pEntries;
	}
	
	public ParserRule getEntriesRule() {
		return getEntriesAccess().getRule();
	}
	
	//Entry:
	//	instruction=Instruction;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	///*
	// * E.g.:
	// *  s1=Catalano.Imaging.Filters.Crop::__construct({i1=0,i2=0,i3=10,i4=10})
	// */ Instruction:
	//	(field=FieldName "=")? context=QualifiedName ("::" | ".") method=MethodName "(" "{"? inputs=Parameters? "}"? ");";
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Parameters:
	//	inputs+=Parameter (',' inputs+=Parameter)*;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//Parameter:
	//	(isIndexed?="i" index=INT)? (isNumb?=NumberConst | isString?=StringConst | isBool?=BoolConst | isNull?=NullConst |
	//	isField?=FieldName);
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//FieldName:
	//	ID;
	public FieldNameElements getFieldNameAccess() {
		return pFieldName;
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}
	
	//MethodName:
	//	ID;
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//StringConst:
	//	STRING;
	public StringConstElements getStringConstAccess() {
		return pStringConst;
	}
	
	public ParserRule getStringConstRule() {
		return getStringConstAccess().getRule();
	}
	
	//BoolConst:
	//	"True" | "true" | "False" | "false" | "TRUE" | "FALSE";
	public BoolConstElements getBoolConstAccess() {
		return pBoolConst;
	}
	
	public ParserRule getBoolConstRule() {
		return getBoolConstAccess().getRule();
	}
	
	//NullConst:
	//	"Null" | "null" | "NULL" | "NuLL";
	public NullConstElements getNullConstAccess() {
		return pNullConst;
	}
	
	public ParserRule getNullConstRule() {
		return getNullConstAccess().getRule();
	}
	
	//NumberConst:
	//	("-" | "+")? INT ("." INT)? (("e" | "E") ("-" | "+") INT)?;
	public NumberConstElements getNumberConstAccess() {
		return pNumberConst;
	}
	
	public ParserRule getNumberConstRule() {
		return getNumberConstAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
