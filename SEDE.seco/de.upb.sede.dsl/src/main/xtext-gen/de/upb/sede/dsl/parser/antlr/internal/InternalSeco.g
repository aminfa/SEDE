/*
 * generated by Xtext 2.15.0
 */
grammar InternalSeco;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.upb.sede.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.upb.sede.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.upb.sede.dsl.services.SecoGrammarAccess;

}

@parser::members {

 	private SecoGrammarAccess grammarAccess;

    public InternalSecoParser(TokenStream input, SecoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Entries";
   	}

   	@Override
   	protected SecoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleEntries
entryRuleEntries returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntriesRule()); }
	iv_ruleEntries=ruleEntries
	{ $current=$iv_ruleEntries.current; }
	EOF;

// Rule Entries
ruleEntries returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getEntriesAccess().getElementsEntryParserRuleCall_0());
			}
			lv_elements_0_0=ruleEntry
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getEntriesRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"de.upb.sede.dsl.Seco.Entry");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryRule()); }
	iv_ruleEntry=ruleEntry
	{ $current=$iv_ruleEntry.current; }
	EOF;

// Rule Entry
ruleEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getEntryAccess().getInstructionInstructionParserRuleCall_0());
			}
			lv_instruction_0_0=ruleInstruction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getEntryRule());
				}
				set(
					$current,
					"instruction",
					lv_instruction_0_0,
					"de.upb.sede.dsl.Seco.Instruction");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInstructionAccess().getFieldFieldNameParserRuleCall_0_0_0());
					}
					lv_field_0_0=ruleFieldName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstructionRule());
						}
						set(
							$current,
							"field",
							lv_field_0_0,
							"de.upb.sede.dsl.Seco.FieldName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getInstructionAccess().getEqualsSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getContextQualifiedNameParserRuleCall_1_0());
				}
				lv_context_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"context",
						lv_context_2_0,
						"de.upb.sede.dsl.Seco.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='::'
			{
				newLeafNode(otherlv_3, grammarAccess.getInstructionAccess().getColonColonKeyword_2_0());
			}
			    |
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getInstructionAccess().getFullStopKeyword_2_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getMethodMethodNameParserRuleCall_3_0());
				}
				lv_method_5_0=ruleMethodName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"method",
						lv_method_5_0,
						"de.upb.sede.dsl.Seco.MethodName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='('
		{
			newLeafNode(otherlv_6, grammarAccess.getInstructionAccess().getLeftParenthesisKeyword_4());
		}
		(
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getInstructionAccess().getLeftCurlyBracketKeyword_5());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getInstructionAccess().getInputsParametersParserRuleCall_6_0());
				}
				lv_inputs_8_0=ruleParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstructionRule());
					}
					set(
						$current,
						"inputs",
						lv_inputs_8_0,
						"de.upb.sede.dsl.Seco.Parameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getInstructionAccess().getRightCurlyBracketKeyword_7());
			}
		)?
		otherlv_10=');'
		{
			newLeafNode(otherlv_10, grammarAccess.getInstructionAccess().getRightParenthesisSemicolonKeyword_8());
		}
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current; }
	EOF;

// Rule Parameters
ruleParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParametersAccess().getInputsParameterParserRuleCall_0_0());
				}
				lv_inputs_0_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametersRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_0_0,
						"de.upb.sede.dsl.Seco.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParametersAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParametersAccess().getInputsParameterParserRuleCall_1_1_0());
					}
					lv_inputs_2_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParametersRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_2_0,
							"de.upb.sede.dsl.Seco.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_isIndexed_0_0='i'
					{
						newLeafNode(lv_isIndexed_0_0, grammarAccess.getParameterAccess().getIsIndexedIKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterRule());
						}
						setWithLastConsumed($current, "isIndexed", true, "i");
					}
				)
			)
			(
				(
					lv_index_1_0=RULE_INT
					{
						newLeafNode(lv_index_1_0, grammarAccess.getParameterAccess().getIndexINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParameterRule());
						}
						setWithLastConsumed(
							$current,
							"index",
							lv_index_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getIsNumbNumberConstParserRuleCall_1_0_0());
					}
					lv_isNumb_2_0=ruleNumberConst
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"isNumb",
							true,
							"de.upb.sede.dsl.Seco.NumberConst");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getIsStringStringConstParserRuleCall_1_1_0());
					}
					lv_isString_3_0=ruleStringConst
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"isString",
							true,
							"de.upb.sede.dsl.Seco.StringConst");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getIsBoolBoolConstParserRuleCall_1_2_0());
					}
					lv_isBool_4_0=ruleBoolConst
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"isBool",
							true,
							"de.upb.sede.dsl.Seco.BoolConst");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getIsNullNullConstParserRuleCall_1_3_0());
					}
					lv_isNull_5_0=ruleNullConst
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"isNull",
							true,
							"de.upb.sede.dsl.Seco.NullConst");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getIsFieldFieldNameParserRuleCall_1_4_0());
					}
					lv_isField_6_0=ruleFieldName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"isField",
							true,
							"de.upb.sede.dsl.Seco.FieldName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFieldName
entryRuleFieldName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFieldNameRule()); }
	iv_ruleFieldName=ruleFieldName
	{ $current=$iv_ruleFieldName.current.getText(); }
	EOF;

// Rule FieldName
ruleFieldName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getFieldNameAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleMethodName
entryRuleMethodName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodNameRule()); }
	iv_ruleMethodName=ruleMethodName
	{ $current=$iv_ruleMethodName.current.getText(); }
	EOF;

// Rule MethodName
ruleMethodName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getMethodNameAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleStringConst
entryRuleStringConst returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringConstRule()); }
	iv_ruleStringConst=ruleStringConst
	{ $current=$iv_ruleStringConst.current.getText(); }
	EOF;

// Rule StringConst
ruleStringConst returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getStringConstAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleBoolConst
entryRuleBoolConst returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolConstRule()); }
	iv_ruleBoolConst=ruleBoolConst
	{ $current=$iv_ruleBoolConst.current.getText(); }
	EOF;

// Rule BoolConst
ruleBoolConst returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='True'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getTrueKeyword_0());
		}
		    |
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getTrueKeyword_1());
		}
		    |
		kw='False'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getFalseKeyword_2());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getFalseKeyword_3());
		}
		    |
		kw='TRUE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getTRUEKeyword_4());
		}
		    |
		kw='FALSE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolConstAccess().getFALSEKeyword_5());
		}
	)
;

// Entry rule entryRuleNullConst
entryRuleNullConst returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNullConstRule()); }
	iv_ruleNullConst=ruleNullConst
	{ $current=$iv_ruleNullConst.current.getText(); }
	EOF;

// Rule NullConst
ruleNullConst returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Null'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNullConstAccess().getNullKeyword_0());
		}
		    |
		kw='null'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNullConstAccess().getNullKeyword_1());
		}
		    |
		kw='NULL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNullConstAccess().getNULLKeyword_2());
		}
		    |
		kw='NuLL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNullConstAccess().getNuLLKeyword_3());
		}
	)
;

// Entry rule entryRuleNumberConst
entryRuleNumberConst returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberConstRule()); }
	iv_ruleNumberConst=ruleNumberConst
	{ $current=$iv_ruleNumberConst.current.getText(); }
	EOF;

// Rule NumberConst
ruleNumberConst returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberConstAccess().getHyphenMinusKeyword_0_0());
			}
			    |
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberConstAccess().getPlusSignKeyword_0_1());
			}
		)?
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getNumberConstAccess().getINTTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberConstAccess().getFullStopKeyword_2_0());
			}
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getNumberConstAccess().getINTTerminalRuleCall_2_1());
			}
		)?
		(
			(
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNumberConstAccess().getEKeyword_3_0_0());
				}
				    |
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNumberConstAccess().getEKeyword_3_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNumberConstAccess().getHyphenMinusKeyword_3_1_0());
				}
				    |
				kw='+'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNumberConstAccess().getPlusSignKeyword_3_1_1());
				}
			)
			this_INT_9=RULE_INT
			{
				$current.merge(this_INT_9);
			}
			{
				newLeafNode(this_INT_9, grammarAccess.getNumberConstAccess().getINTTerminalRuleCall_3_2());
			}
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
