/*
 * generated by Xtext 2.15.0
 */
package de.upb.sede.dsl.serializer;

import com.google.inject.Inject;
import de.upb.sede.dsl.services.SecoGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SecoSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SecoGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Instruction_ColonColonKeyword_2_0_or_FullStopKeyword_2_1;
	protected AbstractElementAlias match_Instruction_LeftCurlyBracketKeyword_5_q;
	protected AbstractElementAlias match_Instruction_RightCurlyBracketKeyword_7_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SecoGrammarAccess) access;
		match_Instruction_ColonColonKeyword_2_0_or_FullStopKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInstructionAccess().getColonColonKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getFullStopKeyword_2_1()));
		match_Instruction_LeftCurlyBracketKeyword_5_q = new TokenAlias(false, true, grammarAccess.getInstructionAccess().getLeftCurlyBracketKeyword_5());
		match_Instruction_RightCurlyBracketKeyword_7_q = new TokenAlias(false, true, grammarAccess.getInstructionAccess().getRightCurlyBracketKeyword_7());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBoolConstRule())
			return getBoolConstToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFieldNameRule())
			return getFieldNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNullConstRule())
			return getNullConstToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNumberConstRule())
			return getNumberConstToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStringConstRule())
			return getStringConstToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BoolConst returns ecore::EString:
	 * 	 "True" | "true" | "False" | "false" | "TRUE" | "FALSE";
	 */
	protected String getBoolConstToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "True";
	}
	
	/**
	 * FieldName returns ecore::EString:
	 * 	ID;
	 */
	protected String getFieldNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * NullConst returns ecore::EString:
	 * 	 "Null" | "null" | "NULL" | "NuLL";
	 */
	protected String getNullConstToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Null";
	}
	
	/**
	 * NumberConst returns ecore::EString:
	 * 	 ("-" | "+")? INT ("." INT)? (("e"|"E") ("-" | "+") INT)?;
	 */
	protected String getNumberConstToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * StringConst returns ecore::EString:
	 * 	 STRING;
	 */
	protected String getStringConstToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Instruction_ColonColonKeyword_2_0_or_FullStopKeyword_2_1.equals(syntax))
				emit_Instruction_ColonColonKeyword_2_0_or_FullStopKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Instruction_LeftCurlyBracketKeyword_5_q.equals(syntax))
				emit_Instruction_LeftCurlyBracketKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Instruction_RightCurlyBracketKeyword_7_q.equals(syntax))
				emit_Instruction_RightCurlyBracketKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '::' | '.'
	 *
	 * This ambiguous syntax occurs at:
	 *     context=QualifiedName (ambiguity) method=MethodName
	 */
	protected void emit_Instruction_ColonColonKeyword_2_0_or_FullStopKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '{'?
	 *
	 * This ambiguous syntax occurs at:
	 *     method=MethodName '(' (ambiguity) '}'? ');' (rule end)
	 *     method=MethodName '(' (ambiguity) inputs=Parameters
	 */
	protected void emit_Instruction_LeftCurlyBracketKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'?
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs=Parameters (ambiguity) ');' (rule end)
	 *     method=MethodName '(' '{'? (ambiguity) ');' (rule end)
	 */
	protected void emit_Instruction_RightCurlyBracketKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
