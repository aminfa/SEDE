/*
 * generated by Xtext 2.15.0
 */
package de.upb.sede.dsl.serializer;

import com.google.inject.Inject;
import de.upb.sede.dsl.seco.Entries;
import de.upb.sede.dsl.seco.Entry;
import de.upb.sede.dsl.seco.Instruction;
import de.upb.sede.dsl.seco.Parameters;
import de.upb.sede.dsl.seco.SecoPackage;
import de.upb.sede.dsl.services.SecoGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SecoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SecoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SecoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SecoPackage.ENTRIES:
				sequence_Entries(context, (Entries) semanticObject); 
				return; 
			case SecoPackage.ENTRY:
				sequence_Entry(context, (Entry) semanticObject); 
				return; 
			case SecoPackage.INSTRUCTION:
				sequence_Instruction(context, (Instruction) semanticObject); 
				return; 
			case SecoPackage.PARAMETER:
				sequence_Parameter(context, (de.upb.sede.dsl.seco.Parameter) semanticObject); 
				return; 
			case SecoPackage.PARAMETERS:
				sequence_Parameters(context, (Parameters) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Entries returns Entries
	 *
	 * Constraint:
	 *     elements+=Entry+
	 */
	protected void sequence_Entries(ISerializationContext context, Entries semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entry returns Entry
	 *
	 * Constraint:
	 *     instruction=Instruction
	 */
	protected void sequence_Entry(ISerializationContext context, Entry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SecoPackage.Literals.ENTRY__INSTRUCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SecoPackage.Literals.ENTRY__INSTRUCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntryAccess().getInstructionInstructionParserRuleCall_0(), semanticObject.getInstruction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Instruction
	 *
	 * Constraint:
	 *     (field=FieldName? context=QualifiedName method=MethodName inputs=Parameters?)
	 */
	protected void sequence_Instruction(ISerializationContext context, Instruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     ((isIndexed?='i' index=INT)? (isNumb?=NumberConst | isString?=StringConst | isBool?=BoolConst | isNull?=NullConst | isField?=FieldName))
	 */
	protected void sequence_Parameter(ISerializationContext context, de.upb.sede.dsl.seco.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameters returns Parameters
	 *
	 * Constraint:
	 *     (inputs+=Parameter inputs+=Parameter*)
	 */
	protected void sequence_Parameters(ISerializationContext context, Parameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
