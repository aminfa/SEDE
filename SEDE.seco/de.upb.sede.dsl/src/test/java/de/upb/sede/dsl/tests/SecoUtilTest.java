/**
 * generated by Xtext 2.15.0
 */
package de.upb.sede.dsl.tests;

import com.google.inject.Inject;

import de.upb.sede.dsl.SecoUtil;
import de.upb.sede.dsl.seco.Assignment;
import de.upb.sede.dsl.seco.EntityClassDefinition;
import de.upb.sede.dsl.seco.EntityMethod;
import de.upb.sede.dsl.seco.Entries;
import de.upb.sede.dsl.seco.SecoFactory;
import de.upb.sede.dsl.seco.SecoPackage;
import de.upb.sede.dsl.tests.SecoInjectorProvider;

import java.io.IOException;
import java.util.Arrays;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.json.simple.JSONObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(SecoInjectorProvider.class)
@SuppressWarnings("all")
public class SecoUtilTest {
  @Inject
  private ParseHelper<Entries> parseHelper;
  
  @Test
  public void testOperation() throws Exception {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("a = ($Number) b;");
      _builder.newLine();
      final Entries result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      Assignment a = ((Assignment) result.getInstructions().get(0));
      Assertions.assertTrue(a.getValue().isCast());
      Assertions.assertEquals("Number",  a.getValue().getCastTarget());
      
      a = EcoreUtil.copy(a);
      Entries entries = new Entries();
      entries.getInstructions().add(a);
      System.out.println(SecoUtil.serialize(entries));
  }

  @Test
  public void testConverter() throws IOException {
		  EPackage.Registry.INSTANCE.put(SecoPackage.eNS_URI, SecoPackage.class);
	      StringConcatenation _builder = new StringConcatenation();
	      
	      _builder.append("class: a.b.C wraps $d.se.F extends $g.H, a.ai.J {");
	      _builder.newLine();
	      _builder.append("method:  !Construct (Number, String, some.Entity) -> (Bool, $some.other.Entity);");
	      _builder.newLine();
	      _builder.append("method:  Construct ($Number, String, some.Entity) -> (Bool, some.other.Entity);");
	      _builder.newLine();
	      _builder.append("cast: <-> $Some.Other.Entity;");
	      _builder.newLine();
	      _builder.append("}");
	      _builder.newLine();
//	      System.out.println(_builder.toString() + "\n");
	      
	      Entries result = SecoUtil.parseSources(_builder.toString());
	      Assertions.assertNotNull(result);
	      EntityClassDefinition a =  (result.getEntities().get(0));
	      Assertions.assertEquals(a.getQualifiedName(), "a.b.C");
	      Assertions.assertEquals(a.getWrappedEntity(), "d.se.F");
	      Assertions.assertEquals(a.getBaseEntities(), Arrays.asList("g.H", "a.ai.J"));

	      EntityMethod m1 = a.getMethods().get(0);
	      EntityMethod m2 = a.getMethods().get(1);
	      
	      Assertions.assertTrue(EcoreUtil.equals(m1, m2));
	      
	      Assertions.assertEquals(a.getCasts().get(0).getResultingEntity(), "Some.Other.Entity");

	      Entries entries = EcoreUtil.copy(result);
	      System.out.println(SecoUtil.serialize(entries));
	      System.out.println(entries);
  }
  @Test
  public void testJson() throws IOException {
      String seco = "class: a {"
      				+ "method:  !Construct (Number, String, some.Entity) -> (Bool, $some.other.Entity)"
      				+"{"
      				+	"\"Hello\":\"world!\",\n"
      				+	"\"Number\":1"
      				+"}"
      				+ ";"
      		+ "}";
      
      Entries entries = EcoreUtil.copy(SecoUtil.parseSources(seco));
      System.out.println(seco);
      System.out.println(entries.getEntities().get(0).getMethods().get(0).getAdditionalData());
      System.out.println(entries.toString());
      
  }
  
}
