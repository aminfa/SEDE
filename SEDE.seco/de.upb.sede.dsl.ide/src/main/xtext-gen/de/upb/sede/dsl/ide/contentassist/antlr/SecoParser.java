/*
 * generated by Xtext 2.15.0
 */
package de.upb.sede.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.upb.sede.dsl.ide.contentassist.antlr.internal.InternalSecoParser;
import de.upb.sede.dsl.services.SecoGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SecoParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SecoGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SecoGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getAlternatives_2(), "rule__Instruction__Alternatives_2");
			builder.put(grammarAccess.getParameterAccess().getAlternatives_1(), "rule__Parameter__Alternatives_1");
			builder.put(grammarAccess.getBoolConstAccess().getAlternatives(), "rule__BoolConst__Alternatives");
			builder.put(grammarAccess.getNullConstAccess().getAlternatives(), "rule__NullConst__Alternatives");
			builder.put(grammarAccess.getNumberConstAccess().getAlternatives_0(), "rule__NumberConst__Alternatives_0");
			builder.put(grammarAccess.getNumberConstAccess().getAlternatives_3_0(), "rule__NumberConst__Alternatives_3_0");
			builder.put(grammarAccess.getNumberConstAccess().getAlternatives_3_1(), "rule__NumberConst__Alternatives_3_1");
			builder.put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
			builder.put(grammarAccess.getInstructionAccess().getGroup_0(), "rule__Instruction__Group_0__0");
			builder.put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_0(), "rule__Parameter__Group_0__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getNumberConstAccess().getGroup(), "rule__NumberConst__Group__0");
			builder.put(grammarAccess.getNumberConstAccess().getGroup_2(), "rule__NumberConst__Group_2__0");
			builder.put(grammarAccess.getNumberConstAccess().getGroup_3(), "rule__NumberConst__Group_3__0");
			builder.put(grammarAccess.getEntriesAccess().getElementsAssignment(), "rule__Entries__ElementsAssignment");
			builder.put(grammarAccess.getEntryAccess().getInstructionAssignment(), "rule__Entry__InstructionAssignment");
			builder.put(grammarAccess.getInstructionAccess().getFieldAssignment_0_0(), "rule__Instruction__FieldAssignment_0_0");
			builder.put(grammarAccess.getInstructionAccess().getContextAssignment_1(), "rule__Instruction__ContextAssignment_1");
			builder.put(grammarAccess.getInstructionAccess().getMethodAssignment_3(), "rule__Instruction__MethodAssignment_3");
			builder.put(grammarAccess.getInstructionAccess().getInputsAssignment_6(), "rule__Instruction__InputsAssignment_6");
			builder.put(grammarAccess.getParametersAccess().getInputsAssignment_0(), "rule__Parameters__InputsAssignment_0");
			builder.put(grammarAccess.getParametersAccess().getInputsAssignment_1_1(), "rule__Parameters__InputsAssignment_1_1");
			builder.put(grammarAccess.getParameterAccess().getIsIndexedAssignment_0_0(), "rule__Parameter__IsIndexedAssignment_0_0");
			builder.put(grammarAccess.getParameterAccess().getIndexAssignment_0_1(), "rule__Parameter__IndexAssignment_0_1");
			builder.put(grammarAccess.getParameterAccess().getIsNumbAssignment_1_0(), "rule__Parameter__IsNumbAssignment_1_0");
			builder.put(grammarAccess.getParameterAccess().getIsStringAssignment_1_1(), "rule__Parameter__IsStringAssignment_1_1");
			builder.put(grammarAccess.getParameterAccess().getIsBoolAssignment_1_2(), "rule__Parameter__IsBoolAssignment_1_2");
			builder.put(grammarAccess.getParameterAccess().getIsNullAssignment_1_3(), "rule__Parameter__IsNullAssignment_1_3");
			builder.put(grammarAccess.getParameterAccess().getIsFieldAssignment_1_4(), "rule__Parameter__IsFieldAssignment_1_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SecoGrammarAccess grammarAccess;

	@Override
	protected InternalSecoParser createParser() {
		InternalSecoParser result = new InternalSecoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SecoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SecoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
