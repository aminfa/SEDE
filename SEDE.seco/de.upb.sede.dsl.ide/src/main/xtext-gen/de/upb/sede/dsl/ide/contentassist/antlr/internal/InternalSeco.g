/*
 * generated by Xtext 2.15.0
 */
grammar InternalSeco;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.upb.sede.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.upb.sede.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.upb.sede.dsl.services.SecoGrammarAccess;

}
@parser::members {
	private SecoGrammarAccess grammarAccess;

	public void setGrammarAccess(SecoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleEntries
entryRuleEntries
:
{ before(grammarAccess.getEntriesRule()); }
	 ruleEntries
{ after(grammarAccess.getEntriesRule()); } 
	 EOF 
;

// Rule Entries
ruleEntries 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntriesAccess().getElementsAssignment()); }
		(rule__Entries__ElementsAssignment)*
		{ after(grammarAccess.getEntriesAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntry
entryRuleEntry
:
{ before(grammarAccess.getEntryRule()); }
	 ruleEntry
{ after(grammarAccess.getEntryRule()); } 
	 EOF 
;

// Rule Entry
ruleEntry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntryAccess().getInstructionAssignment()); }
		(rule__Entry__InstructionAssignment)
		{ after(grammarAccess.getEntryAccess().getInstructionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getGroup()); }
		(rule__Instruction__Group__0)
		{ after(grammarAccess.getInstructionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameters
entryRuleParameters
:
{ before(grammarAccess.getParametersRule()); }
	 ruleParameters
{ after(grammarAccess.getParametersRule()); } 
	 EOF 
;

// Rule Parameters
ruleParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParametersAccess().getGroup()); }
		(rule__Parameters__Group__0)
		{ after(grammarAccess.getParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFieldName
entryRuleFieldName
:
{ before(grammarAccess.getFieldNameRule()); }
	 ruleFieldName
{ after(grammarAccess.getFieldNameRule()); } 
	 EOF 
;

// Rule FieldName
ruleFieldName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldNameAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getFieldNameAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodName
entryRuleMethodName
:
{ before(grammarAccess.getMethodNameRule()); }
	 ruleMethodName
{ after(grammarAccess.getMethodNameRule()); } 
	 EOF 
;

// Rule MethodName
ruleMethodName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodNameAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getMethodNameAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringConst
entryRuleStringConst
:
{ before(grammarAccess.getStringConstRule()); }
	 ruleStringConst
{ after(grammarAccess.getStringConstRule()); } 
	 EOF 
;

// Rule StringConst
ruleStringConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringConstAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getStringConstAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolConst
entryRuleBoolConst
:
{ before(grammarAccess.getBoolConstRule()); }
	 ruleBoolConst
{ after(grammarAccess.getBoolConstRule()); } 
	 EOF 
;

// Rule BoolConst
ruleBoolConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolConstAccess().getAlternatives()); }
		(rule__BoolConst__Alternatives)
		{ after(grammarAccess.getBoolConstAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNullConst
entryRuleNullConst
:
{ before(grammarAccess.getNullConstRule()); }
	 ruleNullConst
{ after(grammarAccess.getNullConstRule()); } 
	 EOF 
;

// Rule NullConst
ruleNullConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullConstAccess().getAlternatives()); }
		(rule__NullConst__Alternatives)
		{ after(grammarAccess.getNullConstAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberConst
entryRuleNumberConst
:
{ before(grammarAccess.getNumberConstRule()); }
	 ruleNumberConst
{ after(grammarAccess.getNumberConstRule()); } 
	 EOF 
;

// Rule NumberConst
ruleNumberConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberConstAccess().getGroup()); }
		(rule__NumberConst__Group__0)
		{ after(grammarAccess.getNumberConstAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getColonColonKeyword_2_0()); }
		'::'
		{ after(grammarAccess.getInstructionAccess().getColonColonKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getFullStopKeyword_2_1()); }
		'.'
		{ after(grammarAccess.getInstructionAccess().getFullStopKeyword_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getIsNumbAssignment_1_0()); }
		(rule__Parameter__IsNumbAssignment_1_0)
		{ after(grammarAccess.getParameterAccess().getIsNumbAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getIsStringAssignment_1_1()); }
		(rule__Parameter__IsStringAssignment_1_1)
		{ after(grammarAccess.getParameterAccess().getIsStringAssignment_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getIsBoolAssignment_1_2()); }
		(rule__Parameter__IsBoolAssignment_1_2)
		{ after(grammarAccess.getParameterAccess().getIsBoolAssignment_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getIsNullAssignment_1_3()); }
		(rule__Parameter__IsNullAssignment_1_3)
		{ after(grammarAccess.getParameterAccess().getIsNullAssignment_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getIsFieldAssignment_1_4()); }
		(rule__Parameter__IsFieldAssignment_1_4)
		{ after(grammarAccess.getParameterAccess().getIsFieldAssignment_1_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolConst__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolConstAccess().getTrueKeyword_0()); }
		'True'
		{ after(grammarAccess.getBoolConstAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstAccess().getTrueKeyword_1()); }
		'true'
		{ after(grammarAccess.getBoolConstAccess().getTrueKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstAccess().getFalseKeyword_2()); }
		'False'
		{ after(grammarAccess.getBoolConstAccess().getFalseKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstAccess().getFalseKeyword_3()); }
		'false'
		{ after(grammarAccess.getBoolConstAccess().getFalseKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstAccess().getTRUEKeyword_4()); }
		'TRUE'
		{ after(grammarAccess.getBoolConstAccess().getTRUEKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getBoolConstAccess().getFALSEKeyword_5()); }
		'FALSE'
		{ after(grammarAccess.getBoolConstAccess().getFALSEKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NullConst__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNullConstAccess().getNullKeyword_0()); }
		'Null'
		{ after(grammarAccess.getNullConstAccess().getNullKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getNullConstAccess().getNullKeyword_1()); }
		'null'
		{ after(grammarAccess.getNullConstAccess().getNullKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getNullConstAccess().getNULLKeyword_2()); }
		'NULL'
		{ after(grammarAccess.getNullConstAccess().getNULLKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getNullConstAccess().getNuLLKeyword_3()); }
		'NuLL'
		{ after(grammarAccess.getNullConstAccess().getNuLLKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberConstAccess().getHyphenMinusKeyword_0_0()); }
		'-'
		{ after(grammarAccess.getNumberConstAccess().getHyphenMinusKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberConstAccess().getPlusSignKeyword_0_1()); }
		'+'
		{ after(grammarAccess.getNumberConstAccess().getPlusSignKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberConstAccess().getEKeyword_3_0_0()); }
		'e'
		{ after(grammarAccess.getNumberConstAccess().getEKeyword_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberConstAccess().getEKeyword_3_0_1()); }
		'E'
		{ after(grammarAccess.getNumberConstAccess().getEKeyword_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Alternatives_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberConstAccess().getHyphenMinusKeyword_3_1_0()); }
		'-'
		{ after(grammarAccess.getNumberConstAccess().getHyphenMinusKeyword_3_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberConstAccess().getPlusSignKeyword_3_1_1()); }
		'+'
		{ after(grammarAccess.getNumberConstAccess().getPlusSignKeyword_3_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__0__Impl
	rule__Instruction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getGroup_0()); }
	(rule__Instruction__Group_0__0)?
	{ after(grammarAccess.getInstructionAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__1__Impl
	rule__Instruction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getContextAssignment_1()); }
	(rule__Instruction__ContextAssignment_1)
	{ after(grammarAccess.getInstructionAccess().getContextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__2__Impl
	rule__Instruction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getAlternatives_2()); }
	(rule__Instruction__Alternatives_2)
	{ after(grammarAccess.getInstructionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__3__Impl
	rule__Instruction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getMethodAssignment_3()); }
	(rule__Instruction__MethodAssignment_3)
	{ after(grammarAccess.getInstructionAccess().getMethodAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__4__Impl
	rule__Instruction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getLeftParenthesisKeyword_4()); }
	'('
	{ after(grammarAccess.getInstructionAccess().getLeftParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__5__Impl
	rule__Instruction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getLeftCurlyBracketKeyword_5()); }
	('{')?
	{ after(grammarAccess.getInstructionAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__6__Impl
	rule__Instruction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getInputsAssignment_6()); }
	(rule__Instruction__InputsAssignment_6)?
	{ after(grammarAccess.getInstructionAccess().getInputsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__7__Impl
	rule__Instruction__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getRightCurlyBracketKeyword_7()); }
	('}')?
	{ after(grammarAccess.getInstructionAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getRightParenthesisSemicolonKeyword_8()); }
	');'
	{ after(grammarAccess.getInstructionAccess().getRightParenthesisSemicolonKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instruction__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_0__0__Impl
	rule__Instruction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getFieldAssignment_0_0()); }
	(rule__Instruction__FieldAssignment_0_0)
	{ after(grammarAccess.getInstructionAccess().getFieldAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instruction__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstructionAccess().getEqualsSignKeyword_0_1()); }
	'='
	{ after(grammarAccess.getInstructionAccess().getEqualsSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group__0__Impl
	rule__Parameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getInputsAssignment_0()); }
	(rule__Parameters__InputsAssignment_0)
	{ after(grammarAccess.getParametersAccess().getInputsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getGroup_1()); }
	(rule__Parameters__Group_1__0)*
	{ after(grammarAccess.getParametersAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group_1__0__Impl
	rule__Parameters__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getParametersAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getInputsAssignment_1_1()); }
	(rule__Parameters__InputsAssignment_1_1)
	{ after(grammarAccess.getParametersAccess().getInputsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getGroup_0()); }
	(rule__Parameter__Group_0__0)?
	{ after(grammarAccess.getParameterAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getAlternatives_1()); }
	(rule__Parameter__Alternatives_1)
	{ after(grammarAccess.getParameterAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group_0__0__Impl
	rule__Parameter__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getIsIndexedAssignment_0_0()); }
	(rule__Parameter__IsIndexedAssignment_0_0)
	{ after(grammarAccess.getParameterAccess().getIsIndexedAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getIndexAssignment_0_1()); }
	(rule__Parameter__IndexAssignment_0_1)
	{ after(grammarAccess.getParameterAccess().getIndexAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConst__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberConst__Group__0__Impl
	rule__NumberConst__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberConstAccess().getAlternatives_0()); }
	(rule__NumberConst__Alternatives_0)?
	{ after(grammarAccess.getNumberConstAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberConst__Group__1__Impl
	rule__NumberConst__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberConstAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getNumberConstAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberConst__Group__2__Impl
	rule__NumberConst__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberConstAccess().getGroup_2()); }
	(rule__NumberConst__Group_2__0)?
	{ after(grammarAccess.getNumberConstAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberConst__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberConstAccess().getGroup_3()); }
	(rule__NumberConst__Group_3__0)?
	{ after(grammarAccess.getNumberConstAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConst__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberConst__Group_2__0__Impl
	rule__NumberConst__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberConstAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getNumberConstAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberConst__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberConstAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
	{ after(grammarAccess.getNumberConstAccess().getINTTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberConst__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberConst__Group_3__0__Impl
	rule__NumberConst__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberConstAccess().getAlternatives_3_0()); }
	(rule__NumberConst__Alternatives_3_0)
	{ after(grammarAccess.getNumberConstAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberConst__Group_3__1__Impl
	rule__NumberConst__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberConstAccess().getAlternatives_3_1()); }
	(rule__NumberConst__Alternatives_3_1)
	{ after(grammarAccess.getNumberConstAccess().getAlternatives_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberConst__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberConst__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberConstAccess().getINTTerminalRuleCall_3_2()); }
	RULE_INT
	{ after(grammarAccess.getNumberConstAccess().getINTTerminalRuleCall_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entries__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntriesAccess().getElementsEntryParserRuleCall_0()); }
		ruleEntry
		{ after(grammarAccess.getEntriesAccess().getElementsEntryParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entry__InstructionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntryAccess().getInstructionInstructionParserRuleCall_0()); }
		ruleInstruction
		{ after(grammarAccess.getEntryAccess().getInstructionInstructionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__FieldAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getFieldFieldNameParserRuleCall_0_0_0()); }
		ruleFieldName
		{ after(grammarAccess.getInstructionAccess().getFieldFieldNameParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__ContextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getContextQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getInstructionAccess().getContextQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__MethodAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getMethodMethodNameParserRuleCall_3_0()); }
		ruleMethodName
		{ after(grammarAccess.getInstructionAccess().getMethodMethodNameParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__InputsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getInputsParametersParserRuleCall_6_0()); }
		ruleParameters
		{ after(grammarAccess.getInstructionAccess().getInputsParametersParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__InputsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametersAccess().getInputsParameterParserRuleCall_0_0()); }
		ruleParameter
		{ after(grammarAccess.getParametersAccess().getInputsParameterParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__InputsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametersAccess().getInputsParameterParserRuleCall_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getParametersAccess().getInputsParameterParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__IsIndexedAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getIsIndexedIKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getParameterAccess().getIsIndexedIKeyword_0_0_0()); }
			'i'
			{ after(grammarAccess.getParameterAccess().getIsIndexedIKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getParameterAccess().getIsIndexedIKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__IndexAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getIndexINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getParameterAccess().getIndexINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__IsNumbAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getIsNumbNumberConstParserRuleCall_1_0_0()); }
		ruleNumberConst
		{ after(grammarAccess.getParameterAccess().getIsNumbNumberConstParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__IsStringAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getIsStringStringConstParserRuleCall_1_1_0()); }
		ruleStringConst
		{ after(grammarAccess.getParameterAccess().getIsStringStringConstParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__IsBoolAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getIsBoolBoolConstParserRuleCall_1_2_0()); }
		ruleBoolConst
		{ after(grammarAccess.getParameterAccess().getIsBoolBoolConstParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__IsNullAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getIsNullNullConstParserRuleCall_1_3_0()); }
		ruleNullConst
		{ after(grammarAccess.getParameterAccess().getIsNullNullConstParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__IsFieldAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getIsFieldFieldNameParserRuleCall_1_4_0()); }
		ruleFieldName
		{ after(grammarAccess.getParameterAccess().getIsFieldFieldNameParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
