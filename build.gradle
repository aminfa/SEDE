
project.ext {
    /*
        Set global properties like folder paths and so on:
     */

}

subprojects {
    /*
        configuration for all sub projects.
     */
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    group = 'de.upb.sede'
    version = '0.0.3'

    configurations {
        provided
        compile.extendsFrom provided
    }

    repositories {
        jcenter()
        mavenCentral()

        // we use jitpack in order to add dependecy to github projects:
        maven { url 'https://jitpack.io' }

        /*
         * local imaging libraries:
         */
        flatDir {
            dirs "${project(':imaging').projectDir}/libs"
        }

        /*// python repos:
        pyGradlePyPi()
        ivy{
            url "/tmp/repo"
            layout 'pattern' , {
                artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
                ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
            }
        }*/
    }
    dependencies {
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
        compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.0'

        // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile "junit:junit:4.12"
    }

    /* Set working directory of tests to root folder: */
    test{
        workingDir = new File("${projectDir}")
        ignoreFailures = true
    }

    // build Jar:
    task jarjar(type: Jar, dependsOn: assemble) {
        manifest {
            attributes 'Implementation-Title': "${project.name}",
                    'Implementation-Version': version
        }
        destinationDir = file("$rootDir/deploy/SEDE")
        baseName = project.name
        from { ((configurations.compile - configurations.provided) - configurations.testCompile)
                .findAll { it.name.endsWith('jar') }
                .collect { zipTree(it) } }
        from sourceSets.main.allSource
        with jar
    }

    clean.doFirst {
        delete fileTree("$rootDir") {
            include '*.jar'
        }
        delete "${projectDir}/testrsc"
        delete "${projectDir}/out"
        delete "${projectDir}/instances"
        delete "${projectDir}/servicespec"
        delete "${rootDir}/deploy/SEDE"
    }

    task serviceSpec(type: JavaExec, dependsOn: assemble) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'de.upb.sede.config.ServiceSpecTransformer'
        // arguments to pass to the application
        args sourceSets.main.resources.srcDirs.getAt(0).toString() + "/config/"
        args "servicespec/"
    }
}
/*
    configurations for each sub project.
 */
project(':SEDE.core') {
    dependencies {
        // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
        compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    }

    task jarTransformer(type: Jar, dependsOn: assemble) {
        manifest {
            attributes 'Main-Class': 'de.upb.sede.config.ServiceSpecTransformer'
        }
        destinationDir = file("$rootDir")
        baseName = 'ServiceSpecTransfomer'
        from { (configurations.compile - configurations.testCompile)
                .collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
}


project(':SEDE.deployment') {
    dependencies {
        provided project(':SEDE.core')
        provided project(':SEDE.http')
        // https://mvnrepository.com/artifact/commons-cli/commons-cli
        compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
        // https://mvnrepository.com/artifact/commons-io/commons-io
        compile group: 'commons-io', name: 'commons-io', version: '2.6'
    }
}

project(':SEDE.gateway') {
    dependencies {
        provided project(':SEDE.core')

        // https://mvnrepository.com/artifact/org.skyscreamer/jsonassert
        testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'

        compile 'com.github.aminfa:TinyJavaDot:v1.3'
    }
}

project(':SEDE.executor') {
    dependencies {
        testCompile project(':demolib')

        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

        provided project(':SEDE.core')
//        provided project(':SEDE.gateway')
    }

    task buildPython(type: Copy) {
        from "${projectDir}/src/main/python/"
        include "**/*.py"
        into "${rootDir}/deploy/SEDE/pyExecutor/"
    }
    jarjar.dependsOn(buildPython)
}

project(':SEDE.http') {
    dependencies {
        // https://mvnrepository.com/artifact/com.google.guava/guava
//        compile group: 'com.google.guava', name: 'guava', version: '25.1-jre'

        testImplementation project(':demolib')
        testImplementation project(':imaging')
        testImplementation project(':SEDE.gateway')

        provided project(':SEDE.core')
        provided project(':SEDE.gateway')
        provided project(':SEDE.executor')
    }

    task jarExecutor(type: Jar, dependsOn: assemble) {
        manifest {
            attributes 'Main-Class': 'de.upb.sede.exec.SimpleHttpExecutorStarter'
        }
        destinationDir = file("$rootDir")
        baseName = 'JavaHttpExecutor'
        from sourceSets.main.output
        from (configurations.compile - configurations.testCompile).
                findAll { it.name.endsWith('jar') }.
                collect { zipTree(it) }
        with jar
    }
}