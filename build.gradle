
project.ext {
    /*
        Set global properties like folder paths and so on:
     */
}


subprojects {
    /*
        configuration for all sub projects.
     */
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    group = 'de.upb.sede'
    version = '0.0.4'

    configurations {
        provided
        compile.extendsFrom provided
    }

    repositories {
        jcenter()
        mavenCentral()

        // we use jitpack in order to add dependecy to github projects:
        maven { url 'https://jitpack.io' }

    }

    dependencies {
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
        runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'


        // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile "junit:junit:4.12"
    }

    /* Set working directory of tests to root folder: */
    test{
        workingDir = new File("${projectDir}")
        ignoreFailures = true
    }

    task dep {
        doLast {
            println "compile: "
            (configurations.compile).collect { println "\t" + it.toString()}
            println "\nprovided: "
            (configurations.provided).collect { println "\t" + it.toString()  }
            println "\ntestCompile: "
            (configurations.testCompile).collect { println "\t" + it.toString() }


            println "\ntestCompile - compile: "
            (configurations.testCompile- configurations.compile).collect { println "\t" + it.toString() }


            println "\ncompile - provided: "
            (configurations.compile - configurations.provided).collect { println "\t" + it.toString()  }
        }
    }

    // build Jar:
    task jarjar(type: Jar, dependsOn: assemble) {

        manifest {
            attributes 'Implementation-Title': "${project.name}",
                    'Implementation-Version': version
        }
        destinationDir = file("$rootDir/deploy/SEDE")
        baseName = project.name

        from { ((configurations.compile - configurations.provided))
                .findAll { it.name.endsWith('jar') }
                .collect { zipTree(it) } }
        from sourceSets.main.allSource
        with jar
    }

    task buildPython(type: Copy) {
        from "${projectDir}/src/main/python/"
        include "**/*.py"
        into "${rootDir}/deploy/SEDE_python/${project.name}"
    }

    clean.doFirst {
        delete fileTree("$rootDir") {
            include '*.jar'
        }
        delete "${projectDir}/testrsc"
        delete "${projectDir}/out"
        delete "${projectDir}/instances"
        delete "${projectDir}/servicespec"
        delete "${rootDir}/deploy/SEDE"
        delete "${rootDir}/deploy/SEDE_Python"
    }
}
/*
    configurations for each sub project.
 */
project(':SEDE.core') {
    dependencies {
        // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
        compile (group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1') {
            exclude module: 'junit'
            exclude group: 'org.hamcrest'
        }
    }

    task jarTransformer(type: Jar, dependsOn: assemble) {
        manifest {
            attributes 'Main-Class': 'de.upb.sede.config.ServiceSpecTransformer'
        }
        destinationDir = file("$rootDir")
        baseName = 'ServiceSpecTransfomer'
        from { (configurations.compile)
                .collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
    buildPython.enabled = false
}



project(':SEDE.gateway') {
    dependencies {
        provided project(':SEDE.core')

        // https://mvnrepository.com/artifact/org.skyscreamer/jsonassert
        testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'

        compile 'com.github.aminfa:TinyJavaDot:v1.3'
    }
}

project(':SEDE.executor') {
    dependencies {
        testCompile project(':demolib')

        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

        provided project(':SEDE.core')
    }
}

apply from: 'docker.gradle'