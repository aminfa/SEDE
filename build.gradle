project.ext {
    /*
        Set global properties like folder paths and so on:
     */
    resources = "${project.rootDir}/rsc/"
    testresources ="${project.rootDir}/testrsc/"
    libraries ="${project.rootDir}/libs/"
}

subprojects {
    /*
        configuration for all sub projects.
     */
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    group = 'de.upb.sede'
    version = '0.0.2'

    configurations {
        provided
        compile.extendsFrom provided
    }

    repositories {
        jcenter()
        mavenCentral()

        // we use jitpack in order to add dependecy to github projects:
        maven { url 'https://jitpack.io' }

        // libraries we only have jar's from:
        flatDir {
            dirs project.libraries
        }

        /*// python repos:
        pyGradlePyPi()
        ivy{
            url "/tmp/repo"
            layout 'pattern' , {
                artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
                ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
            }
        }*/
    }
    dependencies {
        testCompile "junit:junit:4.12"
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
        compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.0'
    }

    /* mark testrec as resources to be loaded during tests */
    sourceSets {
        test {
            resources {
                srcDir project.testresources
            }
        }
    }

    /* Set working directory of tests to root folder: */
    test{
        workingDir = new File("${project.rootDir}")
        ignoreFailures = true
    }

    // build Jar:
    task jarjar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': "${project.name}",
                    'Implementation-Version': version
        }
        destinationDir = file("$rootDir/deploy/SEDE")
        baseName = project.name
        from {
            (configurations.runtime - configurations.provided)
                .findAll {
                !it.name.endsWith(".pom")
            }
                .collect {
                zipTree(it)
            }
        }
        with jar
    }
}
/*
    configurations for each sub project.
 */
project(':SEDE.core') {
    dependencies {
        // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
        compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    }
}


project(':SEDE.deployment') {
    dependencies {
        provided project(':SEDE.core')
        provided project(':SEDE.http-apps')
        // https://mvnrepository.com/artifact/commons-cli/commons-cli
        compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
        // https://mvnrepository.com/artifact/commons-io/commons-io
        compile group: 'commons-io', name: 'commons-io', version: '2.6'
    }
}

project(':SEDE.gateway') {
    dependencies {
        provided project(':SEDE.core')

        // https://mvnrepository.com/artifact/org.skyscreamer/jsonassert
        testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'

        compile 'com.github.aminfa:TinyJavaDot:v1.3'
    }
}

project(':SEDE.executor') {
    dependencies {
        testCompile project(':demolib')

        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

        provided project(':SEDE.core')
//        provided project(':SEDE.gateway')
    }
}

project(':SEDE.http-apps') {
    dependencies {
        // https://mvnrepository.com/artifact/com.google.guava/guava
//        compile group: 'com.google.guava', name: 'guava', version: '25.1-jre'

        testCompile project(':demolib')
        testCompile project(':imaging')

        provided project(':SEDE.core')
        provided project(':SEDE.gateway')
        provided project(':SEDE.executor')
    }
}
/*
    configure resources by copying them into specific folders:
 */
task copyrsc {
    /*
        Copy all files from each subproject resources folder into the project global testresources folder:
     */
    doFirst {
        println "Copying resources:"

        copy {
            println "Copy resources into testrsc folder."
            from getresources()
            into project.testresources
        }
    }
}
task prettyrsc {
    /*
        Run a python script which prettifies the json resources:
     */
    doLast {
        exec{
            println "Run a json-prettifier python script on all the testresources files."
            commandLine 'python3', 'SEDE.core/src/main/python/json_rsc_prettifier.py'
            commandLine 'python', 'SEDE.core/src/main/python/json_rsc_prettifier.py'
//            standardOutput = new ByteArrayOutputStream()
            workingDir project.rootDir
        }
    }
}


/*
    Some utility functions:
 */

/**
 * Returns all files in 'resources' folders within sub projects.
 * @return FileCollection of all resources files.
 */
def getresources(){
    FileCollection resources = project.files([])
    new File('.').traverse(
            type: groovy.io.FileType.DIRECTORIES,
            nameFilter   : ~/resources/,
            preDir       : { if (it.name == 'build') return groovy.io.FileVisitResult.SKIP_SUBTREE },
    ) {
        resources = project.files(resources, fileTree(it))
    }
    return resources
}